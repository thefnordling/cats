/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"site": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./Scripts/site.ts","vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Scripts/nswag/client.ts":
/*!*********************************!*\
  !*** ./Scripts/nswag/client.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
var CatsClient = /** @class */ (function () {
    function CatsClient(baseUrl) {
        this.beforeSend = undefined;
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost/Cats";
    }
    CatsClient.prototype.get = function (onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processGetWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processGet = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                    var item = resultData200_1[_i];
                    result200.push(Cat.fromJS(item));
                }
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    CatsClient.prototype.insertUpdate = function (c, onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(c);
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processInsertUpdateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processInsertUpdateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processInsertUpdateWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processInsertUpdate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processInsertUpdate = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cat.fromJS(resultData200) : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    CatsClient.prototype.delete = function (c, onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(c);
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processDeleteWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processDelete = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cat.fromJS(resultData200) : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    return CatsClient;
}());
exports.CatsClient = CatsClient;
var Cat = /** @class */ (function () {
    function Cat(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Cat.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.birth = data["birth"] ? new Date(data["birth"].toString()) : undefined;
            this.mood = data["mood"];
            this.hungry = data["hungry"];
        }
    };
    Cat.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Cat();
        result.init(data);
        return result;
    };
    Cat.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["birth"] = this.birth ? this.birth.toISOString() : undefined;
        data["mood"] = this.mood;
        data["hungry"] = this.hungry;
        return data;
    };
    return Cat;
}());
exports.Cat = Cat;
var Mood;
(function (Mood) {
    Mood[Mood["None"] = 0] = "None";
    Mood[Mood["Red"] = 1] = "Red";
    Mood[Mood["Amber"] = 2] = "Amber";
    Mood[Mood["Green"] = 3] = "Green";
})(Mood = exports.Mood || (exports.Mood = {}));
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
exports.SwaggerException = SwaggerException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./Scripts/site.ts":
/*!*************************!*\
  !*** ./Scripts/site.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
__webpack_require__(/*! ../scss/_bootstrap-custom.scss */ "./scss/_bootstrap-custom.scss");
var ag_grid_community_1 = __webpack_require__(/*! ag-grid-community */ "./node_modules/ag-grid-community/main.js");
__webpack_require__(/*! ag-grid-community/dist/styles/ag-grid.css */ "./node_modules/ag-grid-community/dist/styles/ag-grid.css");
__webpack_require__(/*! ag-grid-community/dist/styles/ag-theme-balham.css */ "./node_modules/ag-grid-community/dist/styles/ag-theme-balham.css");
var signalR = __webpack_require__(/*! @aspnet/signalr */ "./node_modules/@aspnet/signalr/dist/esm/index.js");
var client_1 = __webpack_require__(/*! ./nswag/client */ "./Scripts/nswag/client.ts");
var moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
var Site = /** @class */ (function () {
    function Site() {
        var _this = this;
        this.gridOptions = {};
        this.hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/Cats/hub")
            .build();
        this.catsClient = new client_1.CatsClient();
        this.$catModal = $('#cat-modal');
        this.$catTitle = $('#cat-modal-title');
        this.$confirmSave = $('#confirm-save');
        this.$deleteModal = $('#delete-modal');
        this.$deleteCatName = $('#delete-modal-cat-name');
        this.$confirmDelete = $('#confirm-delete');
        this.$catId = $('#cat-id');
        this.$catName = $('#cat-name');
        this.$catBirth = $('#cat-birth');
        this.$catMood = $('#cat-mood');
        this.$catHungry = $('#cat-hungry');
        this.gridOptions.columnDefs = this.getColumns();
        this.gridOptions.getRowNodeId = function (cat) { return cat.id || ""; };
        this.gridOptions.rowSelection = 'single';
        this.gridOptions.enableSorting = true;
        this.gridOptions.enableCellChangeFlash = true;
        this.gridOptions.enableColResize = true;
        this.gridOptions.rowData = [];
        this.gridOptions.onSelectionChanged = function (event) { return _this.gridSelectionChanged(event); };
        var eGridDiv = document.querySelector('#cat-grid');
        new ag_grid_community_1.Grid(eGridDiv, this.gridOptions);
        this.catsClient.get(function (cats) { return _this.loadCats(cats); });
        $('.modal-action').click(function (e) {
            var $target = $(e.target);
            if ($target.data('action') && $target.data('target')) {
                $($target.data('target')).data('action', $target.data('action'));
            }
        });
        this.$catModal.on('show.bs.modal', function () { return _this.catModalShown(); });
        this.$deleteModal.on('show.bs.modal', function () { return _this.deleteModalShown(); });
        this.catFlatpicker = window.flatpickr(document.querySelector('#cat-birth'), {
            enableTime: true
        });
        this.$confirmSave.click(function () { return _this.saveCat(); });
        this.$confirmDelete.click(function () { return _this.deleteCat(); });
        this.hubConnection.start().catch(function (err) { return console.log(err); });
        this.hubConnection.on("updateCat", function (c) { return _this.updateCat(c); });
        this.hubConnection.on("deleteCat", function (c) { return _this.removeCat(c); });
    }
    Site.prototype.updateCat = function (c) {
        if (!c || !c.id) {
            return;
        }
        if (this.gridOptions.api.getRowNode(c.id)) {
            this.gridOptions.api.updateRowData({ update: [c] });
        }
        else {
            this.gridOptions.api.updateRowData({ add: [c] });
        }
    };
    Site.prototype.removeCat = function (c) {
        if (!c || !c.id) {
            return;
        }
        this.gridOptions.api.updateRowData({ remove: [c] });
    };
    Site.prototype.saveCat = function () {
        var _this = this;
        var cat = this.getCatFromModal();
        this.catsClient.insertUpdate(cat, function (c) {
            if (c) {
                _this.hubConnection.invoke("catUpdated", c);
                _this.$catModal.modal('hide');
            }
        });
    };
    Site.prototype.deleteCat = function () {
        var _this = this;
        var cat = this.getSelectedCat();
        if (cat) {
            this.catsClient.delete(cat, function (c) {
                if (c) {
                    _this.hubConnection.invoke("catDeleted", c);
                    _this.$deleteModal.modal('hide');
                }
            });
        }
    };
    Site.prototype.gridSelectionChanged = function (event) {
        var selected = this.getSelectedCat();
        if (selected) {
            $('.selection-required').prop('disabled', false);
        }
        else {
            $('.selection-required').prop('disabled', true);
        }
    };
    Site.prototype.catModalShown = function () {
        if (this.$catModal.data('action') == 'add') {
            this.setModalFromCat();
            this.$catTitle.text("Add A Cat");
        }
        else {
            var selected = this.getSelectedCat() || new client_1.Cat();
            this.setModalFromCat(selected);
            this.$catTitle.text("Edit A Cat");
        }
    };
    Site.prototype.deleteModalShown = function () {
        var selected = this.getSelectedCat();
        if (selected && selected.name) {
            this.$deleteCatName.text(selected.name);
        }
        else if (selected) {
            this.$deleteCatName.text(selected.id || "Undefined");
        }
    };
    Site.prototype.loadCats = function (cats) {
        this.gridOptions.api.setRowData(cats || []);
    };
    Site.prototype.getColumns = function () {
        var _this = this;
        return [
            { headerName: "Id", field: "id", hide: true },
            { headerName: "Name", field: "name" },
            { headerName: "Birth", field: "birth", valueFormatter: function (params) { return _this.formatBirth(params); } },
            { headerName: "Hungry", field: "hungry", cellRenderer: function (p) { return _this.renderHungry(p); } },
            { headerName: "Mood", field: "mood", cellRenderer: function (p) { return _this.renderMood(p); } }
        ];
    };
    Site.prototype.formatBirth = function (p) {
        if (!p.value) {
            return "";
        }
        return moment(p.value).format("YYYY-MM-DD hh:mm");
    };
    Site.prototype.renderHungry = function (p) {
        if (p.data && p.data.hungry) {
            return '<i class="far fa-check-square"></i>';
        }
        else {
            return '<i class="far fa-square"></i>';
        }
    };
    Site.prototype.renderMood = function (p) {
        if (!p.data || !p.data.mood) {
            return '<i class="far"></i>';
        }
        else {
            switch (p.data.mood) {
                case 1:
                    return '<i class="fas fa-square" style="color: red"></i> Red';
                case 2:
                    return '<i class="fas fa-square" style="color: #FFBF00"></i> Amber';
                case 3:
                    return '<i class="fas fa-square" style="color: green"></i> Green';
                default:
                    return '<i class="far"></i>';
            }
        }
    };
    Site.prototype.getSelectedCat = function () {
        var selected = this.gridOptions.api.getSelectedNodes();
        if (selected && selected.length) {
            return selected[0].data;
        }
        return undefined;
    };
    Site.prototype.getCatFromModal = function () {
        return new client_1.Cat({
            id: this.getInputString(this.$catId),
            name: this.getInputString(this.$catName),
            birth: this.getInputDate(this.$catBirth),
            hungry: this.getInputBoolean(this.$catHungry),
            mood: this.getInputMood(this.$catMood)
        });
    };
    Site.prototype.setModalFromCat = function (cat) {
        cat = cat || new client_1.Cat();
        this.$catId.val(cat.id || "");
        this.$catName.val(cat.name || "");
        //this.$catBirth.val(moment(cat.birth).format());
        this.catFlatpicker.setDate(cat.birth);
        this.$catHungry.prop('checked', cat.hungry);
        this.$catMood.val(cat.mood);
    };
    Site.prototype.getInputString = function ($input) {
        var val = $input.val();
        if (val !== 0 && !val) {
            return undefined;
        }
        return String(val);
    };
    Site.prototype.getInputDate = function ($input) {
        var m = moment($input.val());
        if (!m.isValid()) {
            return moment().toDate();
        }
        else {
            return m.toDate();
        }
    };
    Site.prototype.getInputBoolean = function ($input) {
        return $input.is(':checked') || false;
    };
    Site.prototype.getInputMood = function ($input) {
        var val = $input.val();
        if (val == client_1.Mood.Amber) {
            return client_1.Mood.Amber;
        }
        else if (val == client_1.Mood.Green) {
            return client_1.Mood.Green;
        }
        else if (val == client_1.Mood.Red) {
            return client_1.Mood.Red;
        }
        else {
            return client_1.Mood.None;
        }
    };
    return Site;
}());
new Site();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQkFBbUI7QUFDbkIsMENBQXdDO0FBQ3hDLHVEQUFzTjtBQUN0TixxREFBbUQ7QUFDbkQsNkRBQTJEO0FBQzNELHlDQUEyQztBQUMzQyx5Q0FBdUQ7QUFDdkQsK0JBQWtDO0FBRWxDO0lBdUJJO1FBQUEsaUJBaUNDO1FBdkRTLGdCQUFXLEdBQWdCLEVBQUUsQ0FBQztRQUM5QixrQkFBYSxHQUFHLElBQUksT0FBTyxDQUFDLG9CQUFvQixFQUFFO2FBQ3ZELE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDcEIsS0FBSyxFQUFFLENBQUM7UUFFYixlQUFVLEdBQUcsSUFBSSxtQkFBVSxFQUFFLENBQUM7UUFDOUIsY0FBUyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM1QixjQUFTLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEMsaUJBQVksR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFbEMsaUJBQVksR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEMsbUJBQWMsR0FBRyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUM3QyxtQkFBYyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRXRDLFdBQU0sR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEIsYUFBUSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxQixjQUFTLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVCLGFBQVEsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUIsZUFBVSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUsxQixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFD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OlsiaW1wb3J0ICdib290c3RyYXAnO1xyXG5pbXBvcnQgXCIuLi9zY3NzL19ib290c3RyYXAtY3VzdG9tLnNjc3NcIjtcclxuaW1wb3J0IHsgR3JpZCwgR3JpZE9wdGlvbnMsIFJvd05vZGUsIFJvd1ZhbHVlQ2hhbmdlZEV2ZW50LCBSb3dEYXRhVXBkYXRlZEV2ZW50LCBDb2xEZWYsIFNlbGVjdGlvbkNoYW5nZWRFdmVudCwgVmFsdWVGb3JtYXR0ZXJQYXJhbXMsIFZhbHVlR2V0dGVyUGFyYW1zLCBJQ2VsbFJlbmRlcmVyUGFyYW1zLCBJQ2VsbFJlbmRlcmVyIH0gZnJvbSBcImFnLWdyaWQtY29tbXVuaXR5XCI7XHJcbmltcG9ydCBcImFnLWdyaWQtY29tbXVuaXR5L2Rpc3Qvc3R5bGVzL2FnLWdyaWQuY3NzXCI7XHJcbmltcG9ydCBcImFnLWdyaWQtY29tbXVuaXR5L2Rpc3Qvc3R5bGVzL2FnLXRoZW1lLWJhbGhhbS5jc3NcIjtcclxuaW1wb3J0ICogYXMgc2lnbmFsUiBmcm9tIFwiQGFzcG5ldC9zaWduYWxyXCI7XHJcbmltcG9ydCB7IENhdHNDbGllbnQsIENhdCwgTW9vZCB9IGZyb20gXCIuL25zd2FnL2NsaWVudFwiO1xyXG5pbXBvcnQgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XHJcblxyXG5jbGFzcyBTaXRlIHtcclxuICAgIHByb3RlY3RlZCBncmlkT3B0aW9ucyA9IDxHcmlkT3B0aW9ucz57fTtcclxuICAgIHByb3RlY3RlZCBodWJDb25uZWN0aW9uID0gbmV3IHNpZ25hbFIuSHViQ29ubmVjdGlvbkJ1aWxkZXIoKVxyXG4gICAgICAgIC53aXRoVXJsKFwiL0NhdHMvaHViXCIpXHJcbiAgICAgICAgLmJ1aWxkKCk7XHJcblxyXG4gICAgY2F0c0NsaWVudCA9IG5ldyBDYXRzQ2xpZW50KCk7XHJcbiAgICAkY2F0TW9kYWwgPSAkKCcjY2F0LW1vZGFsJyk7XHJcbiAgICAkY2F0VGl0bGUgPSAkKCcjY2F0LW1vZGFsLXRpdGxlJyk7XHJcbiAgICAkY29uZmlybVNhdmUgPSAkKCcjY29uZmlybS1zYXZlJyk7XHJcblxyXG4gICAgJGRlbGV0ZU1vZGFsID0gJCgnI2RlbGV0ZS1tb2RhbCcpO1xyXG4gICAgJGRlbGV0ZUNhdE5hbWUgPSAkKCcjZGVsZXRlLW1vZGFsLWNhdC1uYW1lJyk7XHJcbiAgICAkY29uZmlybURlbGV0ZSA9ICQoJyNjb25maXJtLWRlbGV0ZScpO1xyXG5cclxuICAgICRjYXRJZCA9ICQoJyNjYXQtaWQnKTtcclxuICAgICRjYXROYW1lID0gJCgnI2NhdC1uYW1lJyk7XHJcbiAgICAkY2F0QmlydGggPSAkKCcjY2F0LWJpcnRoJyk7XHJcbiAgICAkY2F0TW9vZCA9ICQoJyNjYXQtbW9vZCcpO1xyXG4gICAgJGNhdEh1bmdyeSA9ICQoJyNjYXQtaHVuZ3J5Jyk7XHJcblxyXG4gICAgY2F0RmxhdHBpY2tlcjogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuY29sdW1uRGVmcyA9IHRoaXMuZ2V0Q29sdW1ucygpO1xyXG4gICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuZ2V0Um93Tm9kZUlkID0gKGNhdDogQ2F0KSA9PiBjYXQuaWQgfHwgXCJcIjtcclxuICAgICAgICB0aGlzLmdyaWRPcHRpb25zLnJvd1NlbGVjdGlvbiA9ICdzaW5nbGUnO1xyXG4gICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuZW5hYmxlU29ydGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5ncmlkT3B0aW9ucy5lbmFibGVDZWxsQ2hhbmdlRmxhc2ggPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuZW5hYmxlQ29sUmVzaXplID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmdyaWRPcHRpb25zLnJvd0RhdGEgPSBbXTtcclxuICAgICAgICB0aGlzLmdyaWRPcHRpb25zLm9uU2VsZWN0aW9uQ2hhbmdlZCA9IChldmVudDogU2VsZWN0aW9uQ2hhbmdlZEV2ZW50KSA9PiB0aGlzLmdyaWRTZWxlY3Rpb25DaGFuZ2VkKGV2ZW50KTtcclxuICAgICAgICBjb25zdCBlR3JpZERpdjogSFRNTEVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhdC1ncmlkJyk7XHJcbiAgICAgICAgbmV3IEdyaWQoZUdyaWREaXYsIHRoaXMuZ3JpZE9wdGlvbnMpO1xyXG5cclxuICAgICAgICB0aGlzLmNhdHNDbGllbnQuZ2V0KChjYXRzOiBDYXRbXSB8IG51bGwpID0+IHRoaXMubG9hZENhdHMoY2F0cykpXHJcblxyXG4gICAgICAgICQoJy5tb2RhbC1hY3Rpb24nKS5jbGljaygoZTogSlF1ZXJ5LkNsaWNrRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICBpZiAoJHRhcmdldC5kYXRhKCdhY3Rpb24nKSAmJiAkdGFyZ2V0LmRhdGEoJ3RhcmdldCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkKCR0YXJnZXQuZGF0YSgndGFyZ2V0JykpLmRhdGEoJ2FjdGlvbicsICR0YXJnZXQuZGF0YSgnYWN0aW9uJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuJGNhdE1vZGFsLm9uKCdzaG93LmJzLm1vZGFsJywgKCkgPT4gdGhpcy5jYXRNb2RhbFNob3duKCkpO1xyXG4gICAgICAgIHRoaXMuJGRlbGV0ZU1vZGFsLm9uKCdzaG93LmJzLm1vZGFsJywgKCkgPT4gdGhpcy5kZWxldGVNb2RhbFNob3duKCkpO1xyXG4gICAgICAgIHRoaXMuY2F0RmxhdHBpY2tlciA9ICg8YW55PndpbmRvdykuZmxhdHBpY2tyKDxIVE1MRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2F0LWJpcnRoJyksIHtcclxuICAgICAgICAgICAgZW5hYmxlVGltZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLiRjb25maXJtU2F2ZS5jbGljaygoKSA9PiB0aGlzLnNhdmVDYXQoKSk7XHJcbiAgICAgICAgdGhpcy4kY29uZmlybURlbGV0ZS5jbGljaygoKSA9PiB0aGlzLmRlbGV0ZUNhdCgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5odWJDb25uZWN0aW9uLnN0YXJ0KCkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgICAgIHRoaXMuaHViQ29ubmVjdGlvbi5vbihcInVwZGF0ZUNhdFwiLCAoYzogQ2F0KSA9PiB0aGlzLnVwZGF0ZUNhdChjKSk7XHJcbiAgICAgICAgdGhpcy5odWJDb25uZWN0aW9uLm9uKFwiZGVsZXRlQ2F0XCIsIChjOiBDYXQpID0+IHRoaXMucmVtb3ZlQ2F0KGMpKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZUNhdChjOiBDYXQpIHtcclxuICAgICAgICBpZiAoIWMgfHwgIWMuaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnMuYXBpIS5nZXRSb3dOb2RlKGMuaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuYXBpIS51cGRhdGVSb3dEYXRhKHsgdXBkYXRlOiBbY10gfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9ucy5hcGkhLnVwZGF0ZVJvd0RhdGEoeyBhZGQ6IFtjXSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZW1vdmVDYXQoYzogQ2F0KSB7XHJcbiAgICAgICAgaWYgKCFjIHx8ICFjLmlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ncmlkT3B0aW9ucy5hcGkhLnVwZGF0ZVJvd0RhdGEoeyByZW1vdmU6IFtjXSB9KTtcclxuICAgIH1cclxuICAgIHNhdmVDYXQoKSB7XHJcbiAgICAgICAgY29uc3QgY2F0ID0gdGhpcy5nZXRDYXRGcm9tTW9kYWwoKTtcclxuICAgICAgICB0aGlzLmNhdHNDbGllbnQuaW5zZXJ0VXBkYXRlKGNhdCwgKGM6IENhdCB8IG51bGwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaHViQ29ubmVjdGlvbi5pbnZva2UoXCJjYXRVcGRhdGVkXCIsIGMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhdE1vZGFsLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRlbGV0ZUNhdCgpIHtcclxuICAgICAgICBjb25zdCBjYXQgPSB0aGlzLmdldFNlbGVjdGVkQ2F0KCk7XHJcbiAgICAgICAgaWYgKGNhdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhdHNDbGllbnQuZGVsZXRlKGNhdCwgKGM6IENhdCB8IG51bGwpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5odWJDb25uZWN0aW9uLmludm9rZShcImNhdERlbGV0ZWRcIiwgYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGVsZXRlTW9kYWwubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ3JpZFNlbGVjdGlvbkNoYW5nZWQoZXZlbnQ6IFNlbGVjdGlvbkNoYW5nZWRFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5nZXRTZWxlY3RlZENhdCgpO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAkKCcuc2VsZWN0aW9uLXJlcXVpcmVkJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLnNlbGVjdGlvbi1yZXF1aXJlZCcpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0TW9kYWxTaG93bigpIHtcclxuICAgICAgICBpZiAodGhpcy4kY2F0TW9kYWwuZGF0YSgnYWN0aW9uJykgPT0gJ2FkZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNb2RhbEZyb21DYXQoKTtcclxuICAgICAgICAgICAgdGhpcy4kY2F0VGl0bGUudGV4dChcIkFkZCBBIENhdFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkQ2F0KCkgfHwgbmV3IENhdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldE1vZGFsRnJvbUNhdChzZWxlY3RlZCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhdFRpdGxlLnRleHQoXCJFZGl0IEEgQ2F0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRlbGV0ZU1vZGFsU2hvd24oKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkQ2F0KCk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkICYmIHNlbGVjdGVkLm5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy4kZGVsZXRlQ2F0TmFtZS50ZXh0KHNlbGVjdGVkLm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy4kZGVsZXRlQ2F0TmFtZS50ZXh0KHNlbGVjdGVkLmlkIHx8IFwiVW5kZWZpbmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxvYWRDYXRzKGNhdHM6IENhdFtdIHwgbnVsbCkge1xyXG4gICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuYXBpIS5zZXRSb3dEYXRhKGNhdHMgfHwgW10pO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29sdW1ucygpOiBDb2xEZWZbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyBoZWFkZXJOYW1lOiBcIklkXCIsIGZpZWxkOiBcImlkXCIsIGhpZGU6IHRydWUgfSxcclxuICAgICAgICAgICAgeyBoZWFkZXJOYW1lOiBcIk5hbWVcIiwgZmllbGQ6IFwibmFtZVwiIH0sXHJcbiAgICAgICAgICAgIHsgaGVhZGVyTmFtZTogXCJCaXJ0aFwiLCBmaWVsZDogXCJiaXJ0aFwiLCB2YWx1ZUZvcm1hdHRlcjogKHBhcmFtczogVmFsdWVGb3JtYXR0ZXJQYXJhbXMpID0+IHRoaXMuZm9ybWF0QmlydGgocGFyYW1zKX0sXHJcbiAgICAgICAgICAgIHsgaGVhZGVyTmFtZTogXCJIdW5ncnlcIiwgZmllbGQ6IFwiaHVuZ3J5XCIsIGNlbGxSZW5kZXJlcjogKHA6IElDZWxsUmVuZGVyZXJQYXJhbXMpID0+IHRoaXMucmVuZGVySHVuZ3J5KHApIH0sXHJcbiAgICAgICAgICAgIHsgaGVhZGVyTmFtZTogXCJNb29kXCIsIGZpZWxkOiBcIm1vb2RcIiwgY2VsbFJlbmRlcmVyOiAocDogSUNlbGxSZW5kZXJlclBhcmFtcykgPT4gdGhpcy5yZW5kZXJNb29kKHApfVxyXG4gICAgICAgIF1cclxuICAgIH1cclxuICAgIGZvcm1hdEJpcnRoKHA6IFZhbHVlRm9ybWF0dGVyUGFyYW1zKTogc3RyaW5nICB7XHJcbiAgICAgICAgaWYgKCFwLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1vbWVudChwLnZhbHVlKS5mb3JtYXQoXCJZWVlZLU1NLUREIGhoOm1tXCIpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVySHVuZ3J5KHA6IElDZWxsUmVuZGVyZXJQYXJhbXMpIHtcclxuICAgICAgICBpZiAocC5kYXRhICYmIHAuZGF0YS5odW5ncnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICc8aSBjbGFzcz1cImZhciBmYS1jaGVjay1zcXVhcmVcIj48L2k+JztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJzxpIGNsYXNzPVwiZmFyIGZhLXNxdWFyZVwiPjwvaT4nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbmRlck1vb2QocDogSUNlbGxSZW5kZXJlclBhcmFtcykge1xyXG4gICAgICAgIGlmICghcC5kYXRhIHx8ICFwLmRhdGEubW9vZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJzxpIGNsYXNzPVwiZmFyXCI+PC9pPic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwLmRhdGEubW9vZCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtc3F1YXJlXCIgc3R5bGU9XCJjb2xvcjogcmVkXCI+PC9pPiBSZWQnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtc3F1YXJlXCIgc3R5bGU9XCJjb2xvcjogI0ZGQkYwMFwiPjwvaT4gQW1iZXInO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtc3F1YXJlXCIgc3R5bGU9XCJjb2xvcjogZ3JlZW5cIj48L2k+IEdyZWVuJztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8aSBjbGFzcz1cImZhclwiPjwvaT4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0U2VsZWN0ZWRDYXQoKTogQ2F0IHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuZ3JpZE9wdGlvbnMuYXBpIS5nZXRTZWxlY3RlZE5vZGVzKCk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkICYmIHNlbGVjdGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRbMF0uZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGdldENhdEZyb21Nb2RhbCgpOiBDYXQge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2F0KHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuZ2V0SW5wdXRTdHJpbmcodGhpcy4kY2F0SWQpLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLmdldElucHV0U3RyaW5nKHRoaXMuJGNhdE5hbWUpLFxyXG4gICAgICAgICAgICBiaXJ0aDogdGhpcy5nZXRJbnB1dERhdGUodGhpcy4kY2F0QmlydGgpLFxyXG4gICAgICAgICAgICBodW5ncnk6IHRoaXMuZ2V0SW5wdXRCb29sZWFuKHRoaXMuJGNhdEh1bmdyeSksXHJcbiAgICAgICAgICAgIG1vb2Q6IHRoaXMuZ2V0SW5wdXRNb29kKHRoaXMuJGNhdE1vb2QpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzZXRNb2RhbEZyb21DYXQoY2F0PzogQ2F0KSB7XHJcbiAgICAgICAgY2F0ID0gY2F0IHx8IG5ldyBDYXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy4kY2F0SWQudmFsKGNhdC5pZCB8fCBcIlwiKTtcclxuICAgICAgICB0aGlzLiRjYXROYW1lLnZhbChjYXQubmFtZSB8fCBcIlwiKTtcclxuICAgICAgICAvL3RoaXMuJGNhdEJpcnRoLnZhbChtb21lbnQoY2F0LmJpcnRoKS5mb3JtYXQoKSk7XHJcbiAgICAgICAgdGhpcy5jYXRGbGF0cGlja2VyLnNldERhdGUoY2F0LmJpcnRoKTtcclxuICAgICAgICB0aGlzLiRjYXRIdW5ncnkucHJvcCgnY2hlY2tlZCcsIGNhdC5odW5ncnkpO1xyXG4gICAgICAgIHRoaXMuJGNhdE1vb2QudmFsKGNhdC5tb29kKTtcclxuICAgIH1cclxuICAgIGdldElucHV0U3RyaW5nKCRpbnB1dDogSlF1ZXJ5PEhUTUxFbGVtZW50Pik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gJGlucHV0LnZhbCgpO1xyXG4gICAgICAgIGlmICh2YWwgIT09IDAgJiYgIXZhbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XHJcbiAgICB9XHJcbiAgICBnZXRJbnB1dERhdGUoJGlucHV0OiBKUXVlcnk8SFRNTEVsZW1lbnQ+KTogRGF0ZSB7XHJcbiAgICAgICAgY29uc3QgbSA9IG1vbWVudCgkaW5wdXQudmFsKCkpO1xyXG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vbWVudCgpLnRvRGF0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtLnRvRGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldElucHV0Qm9vbGVhbigkaW5wdXQ6IEpRdWVyeTxIVE1MRWxlbWVudD4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gJGlucHV0LmlzKCc6Y2hlY2tlZCcpIHx8IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZ2V0SW5wdXRNb29kKCRpbnB1dDogSlF1ZXJ5PEhUTUxFbGVtZW50Pik6IE1vb2Qge1xyXG4gICAgICAgIGNvbnN0IHZhbCA9ICRpbnB1dC52YWwoKTtcclxuICAgICAgICBpZiAodmFsID09IE1vb2QuQW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1vb2QuQW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWwgPT0gTW9vZC5HcmVlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gTW9vZC5HcmVlbjtcclxuICAgICAgICB9IGVsc2UgaWYgKHZhbCA9PSBNb29kLlJlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTW9vZC5SZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1vb2QuTm9uZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBTaXRlKCk7Il19
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-SG": "./node_modules/moment/locale/en-SG.js",
	"./en-SG.js": "./node_modules/moment/locale/en-SG.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,