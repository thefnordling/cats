/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"site": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./Scripts/site.ts","vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Scripts/nswag/client.ts":
/*!*********************************!*\
  !*** ./Scripts/nswag/client.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
var CatsClient = /** @class */ (function () {
    function CatsClient(baseUrl) {
        this.beforeSend = undefined;
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost/Cats";
    }
    CatsClient.prototype.get = function (onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processGetWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processGet = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                    var item = resultData200_1[_i];
                    result200.push(Cat.fromJS(item));
                }
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    CatsClient.prototype.insertUpdate = function (c, onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(c);
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processInsertUpdateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processInsertUpdateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processInsertUpdateWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processInsertUpdate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processInsertUpdate = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cat.fromJS(resultData200) : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    CatsClient.prototype.delete = function (c, onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(c);
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processDeleteWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processDelete = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cat.fromJS(resultData200) : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    return CatsClient;
}());
exports.CatsClient = CatsClient;
var Cat = /** @class */ (function () {
    function Cat(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Cat.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.birth = data["birth"] ? new Date(data["birth"].toString()) : undefined;
            this.mood = data["mood"];
            this.hungry = data["hungry"];
        }
    };
    Cat.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Cat();
        result.init(data);
        return result;
    };
    Cat.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["birth"] = this.birth ? this.birth.toISOString() : undefined;
        data["mood"] = this.mood;
        data["hungry"] = this.hungry;
        return data;
    };
    return Cat;
}());
exports.Cat = Cat;
var Mood;
(function (Mood) {
    Mood[Mood["None"] = 0] = "None";
    Mood[Mood["Red"] = 1] = "Red";
    Mood[Mood["Amber"] = 2] = "Amber";
    Mood[Mood["Green"] = 3] = "Green";
})(Mood = exports.Mood || (exports.Mood = {}));
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
exports.SwaggerException = SwaggerException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./Scripts/site.ts":
/*!*************************!*\
  !*** ./Scripts/site.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
__webpack_require__(/*! ../scss/_bootstrap-custom.scss */ "./scss/_bootstrap-custom.scss");
var ag_grid_community_1 = __webpack_require__(/*! ag-grid-community */ "./node_modules/ag-grid-community/main.js");
__webpack_require__(/*! ag-grid-community/dist/styles/ag-grid.css */ "./node_modules/ag-grid-community/dist/styles/ag-grid.css");
__webpack_require__(/*! ag-grid-community/dist/styles/ag-theme-balham.css */ "./node_modules/ag-grid-community/dist/styles/ag-theme-balham.css");
var signalR = __webpack_require__(/*! @aspnet/signalr */ "./node_modules/@aspnet/signalr/dist/esm/index.js");
var client_1 = __webpack_require__(/*! ./nswag/client */ "./Scripts/nswag/client.ts");
var moment = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
var Site = /** @class */ (function () {
    function Site() {
        var _this = this;
        this.gridOptions = {};
        this.hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost/cats/hub")
            .build();
        this.catsClient = new client_1.CatsClient("/cats");
        this.$catModal = $('#cat-modal');
        this.$catTitle = $('#cat-modal-title');
        this.$confirmSave = $('#confirm-save');
        this.$deleteModal = $('#delete-modal');
        this.$deleteCatName = $('#delete-modal-cat-name');
        this.$confirmDelete = $('#confirm-delete');
        this.$catId = $('#cat-id');
        this.$catName = $('#cat-name');
        this.$catBirth = $('#cat-birth');
        this.$catMood = $('#cat-mood');
        this.$catHungry = $('#cat-hungry');
        this.gridOptions.columnDefs = this.getColumns();
        this.gridOptions.getRowNodeId = function (cat) { return cat.id || ""; };
        this.gridOptions.rowSelection = 'single';
        this.gridOptions.defaultColDef = {
            sortable: true,
            resizable: true
        };
        this.gridOptions.enableCellChangeFlash = true;
        this.gridOptions.rowData = [];
        this.gridOptions.onSelectionChanged = function (event) { return _this.gridSelectionChanged(event); };
        var eGridDiv = document.querySelector('#cat-grid');
        new ag_grid_community_1.Grid(eGridDiv, this.gridOptions);
        this.catsClient.get(function (cats) { return _this.loadCats(cats); });
        $('.modal-action').click(function (e) {
            var $target = $(e.target);
            if ($target.data('action') && $target.data('target')) {
                $($target.data('target')).data('action', $target.data('action'));
            }
        });
        this.$catModal.on('show.bs.modal', function () { return _this.catModalShown(); });
        this.$deleteModal.on('show.bs.modal', function () { return _this.deleteModalShown(); });
        this.catFlatpicker = window.flatpickr(document.querySelector('#cat-birth'), {
            enableTime: true
        });
        this.$confirmSave.click(function () { return _this.saveCat(); });
        this.$confirmDelete.click(function () { return _this.deleteCat(); });
        this.hubConnection.start().catch(function (err) { return console.log(err); });
        this.hubConnection.on("updateCat", function (c) { return _this.updateCat(c); });
        this.hubConnection.on("deleteCat", function (c) { return _this.removeCat(c); });
    }
    Site.prototype.updateCat = function (c) {
        if (!c || !c.id) {
            return;
        }
        if (this.gridOptions.api.getRowNode(c.id)) {
            this.gridOptions.api.updateRowData({ update: [c] });
        }
        else {
            this.gridOptions.api.updateRowData({ add: [c] });
        }
    };
    Site.prototype.removeCat = function (c) {
        if (!c || !c.id) {
            return;
        }
        this.gridOptions.api.updateRowData({ remove: [c] });
    };
    Site.prototype.saveCat = function () {
        var _this = this;
        var cat = this.getCatFromModal();
        this.catsClient.insertUpdate(cat, function (c) {
            if (c) {
                _this.hubConnection.invoke("catUpdated", c);
                _this.$catModal.modal('hide');
            }
        });
    };
    Site.prototype.deleteCat = function () {
        var _this = this;
        var cat = this.getSelectedCat();
        if (cat) {
            this.catsClient.delete(cat, function (c) {
                if (c) {
                    _this.hubConnection.invoke("catDeleted", c);
                    _this.$deleteModal.modal('hide');
                }
            });
        }
    };
    Site.prototype.gridSelectionChanged = function (event) {
        var selected = this.getSelectedCat();
        if (selected) {
            $('.selection-required').prop('disabled', false);
        }
        else {
            $('.selection-required').prop('disabled', true);
        }
    };
    Site.prototype.catModalShown = function () {
        if (this.$catModal.data('action') == 'add') {
            this.setModalFromCat();
            this.$catTitle.text("Add A Cat");
        }
        else {
            var selected = this.getSelectedCat() || new client_1.Cat();
            this.setModalFromCat(selected);
            this.$catTitle.text("Edit A Cat");
        }
    };
    Site.prototype.deleteModalShown = function () {
        var selected = this.getSelectedCat();
        if (selected && selected.name) {
            this.$deleteCatName.text(selected.name);
        }
        else if (selected) {
            this.$deleteCatName.text(selected.id || "Undefined");
        }
    };
    Site.prototype.loadCats = function (cats) {
        this.gridOptions.api.setRowData(cats || []);
    };
    Site.prototype.getColumns = function () {
        var _this = this;
        return [
            { headerName: "Id", field: "id", hide: true },
            { headerName: "Name", field: "name" },
            { headerName: "Birth", field: "birth", valueFormatter: function (params) { return _this.formatBirth(params); } },
            { headerName: "Hungry", field: "hungry", cellRenderer: function (p) { return _this.renderHungry(p); } },
            { headerName: "Mood", field: "mood", cellRenderer: function (p) { return _this.renderMood(p); } }
        ];
    };
    Site.prototype.formatBirth = function (p) {
        if (!p.value) {
            return "";
        }
        return moment(p.value).format("YYYY-MM-DD hh:mm");
    };
    Site.prototype.renderHungry = function (p) {
        if (p.data && p.data.hungry) {
            return '<i class="far fa-check-square"></i>';
        }
        else {
            return '<i class="far fa-square"></i>';
        }
    };
    Site.prototype.renderMood = function (p) {
        if (!p.data || !p.data.mood) {
            return '<i class="far"></i>';
        }
        else {
            switch (p.data.mood) {
                case 1:
                    return '<i class="fas fa-square" style="color: red"></i> Red';
                case 2:
                    return '<i class="fas fa-square" style="color: #FFBF00"></i> Amber';
                case 3:
                    return '<i class="fas fa-square" style="color: green"></i> Green';
                default:
                    return '<i class="far"></i>';
            }
        }
    };
    Site.prototype.getSelectedCat = function () {
        var selected = this.gridOptions.api.getSelectedNodes();
        if (selected && selected.length) {
            return selected[0].data;
        }
        return undefined;
    };
    Site.prototype.getCatFromModal = function () {
        return new client_1.Cat({
            id: this.getInputString(this.$catId),
            name: this.getInputString(this.$catName),
            birth: this.getInputDate(this.$catBirth),
            hungry: this.getInputBoolean(this.$catHungry),
            mood: this.getInputMood(this.$catMood)
        });
    };
    Site.prototype.setModalFromCat = function (cat) {
        cat = cat || new client_1.Cat();
        this.$catId.val(cat.id || "");
        this.$catName.val(cat.name || "");
        //this.$catBirth.val(moment(cat.birth).format());
        this.catFlatpicker.setDate(cat.birth);
        this.$catHungry.prop('checked', cat.hungry);
        this.$catMood.val(cat.mood);
    };
    Site.prototype.getInputString = function ($input) {
        var val = $input.val();
        if (val !== 0 && !val) {
            return undefined;
        }
        return String(val);
    };
    Site.prototype.getInputDate = function ($input) {
        var m = moment($input.val());
        if (!m.isValid()) {
            return moment().toDate();
        }
        else {
            return m.toDate();
        }
    };
    Site.prototype.getInputBoolean = function ($input) {
        return $input.is(':checked') || false;
    };
    Site.prototype.getInputMood = function ($input) {
        var val = $input.val();
        if (val == client_1.Mood.Amber) {
            return client_1.Mood.Amber;
        }
        else if (val == client_1.Mood.Green) {
            return client_1.Mood.Green;
        }
        else if (val == client_1.Mood.Red) {
            return client_1.Mood.Red;
        }
        else {
            return client_1.Mood.None;
        }
    };
    return Site;
}());
new Site();
//# sourceMappingURL=data:application/json;base64,
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-SG": "./node_modules/moment/locale/en-SG.js",
	"./en-SG.js": "./node_modules/moment/locale/en-SG.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,