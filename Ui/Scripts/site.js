"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("bootstrap");
require("../scss/_bootstrap-custom.scss");
var ag_grid_community_1 = require("ag-grid-community");
require("ag-grid-community/dist/styles/ag-grid.css");
require("ag-grid-community/dist/styles/ag-theme-balham.css");
var signalR = require("@aspnet/signalr");
var client_1 = require("./nswag/client");
var moment = require("moment");
var Site = /** @class */ (function () {
    function Site() {
        var _this = this;
        this.gridOptions = {};
        this.hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/HoldingsGrid/hub")
            .build();
        this.catsClient = new client_1.CatsClient();
        this.$catModal = $('#cat-modal');
        this.$catTitle = $('#cat-modal-title');
        this.$confirmSave = $('#confirm-save');
        this.$deleteModal = $('#delete-modal');
        this.$deleteCatName = $('#delete-modal-cat-name');
        this.$confirmDelete = $('#confirm-delete');
        this.$catId = $('#cat-id');
        this.$catName = $('#cat-name');
        this.$catBirth = $('#cat-birth');
        this.$catMood = $('#cat-mood');
        this.$catHungry = $('#cat-hungry');
        this.gridOptions.columnDefs = this.getColumns();
        this.gridOptions.getRowNodeId = function (cat) { return cat.id || ""; };
        this.gridOptions.rowSelection = 'single';
        this.gridOptions.enableSorting = true;
        this.gridOptions.enableCellChangeFlash = true;
        this.gridOptions.enableColResize = true;
        this.gridOptions.rowData = [];
        this.gridOptions.onSelectionChanged = function (event) { return _this.gridSelectionChanged(event); };
        var eGridDiv = document.querySelector('#cat-grid');
        new ag_grid_community_1.Grid(eGridDiv, this.gridOptions);
        this.catsClient.get(function (cats) { return _this.loadCats(cats); });
        $('.modal-action').click(function (e) {
            var $target = $(e.target);
            if ($target.data('action') && $target.data('target')) {
                $($target.data('target')).data('action', $target.data('action'));
            }
        });
        this.$catModal.on('show.bs.modal', function () { return _this.catModalShown(); });
        this.$deleteModal.on('show.bs.modal', function () { return _this.deleteModalShown(); });
    }
    Site.prototype.gridSelectionChanged = function (event) {
        var selected = this.getSelectedCat();
        if (selected) {
            $('.selection-required').prop('disabled', false);
        }
        else {
            $('.selection-required').prop('disabled', true);
        }
    };
    Site.prototype.catModalShown = function () {
        var selected = this.getSelectedCat() || new client_1.Cat();
        this.setModalFromCat(selected);
        this.$catTitle.text("Add A Cat");
    };
    Site.prototype.deleteModalShown = function () {
    };
    Site.prototype.loadCats = function (cats) {
        this.gridOptions.api.setRowData(cats || []);
    };
    Site.prototype.getColumns = function () {
        return [
            { headerName: "Id", field: "id" },
            { headerName: "Name", field: "name" },
            { headerName: "Birth", field: "birth" },
            { headerName: "Hungry", field: "hungry" },
            { headerName: "Mood", field: "mood" }
        ];
    };
    Site.prototype.getSelectedCat = function () {
        var selected = this.gridOptions.api.getSelectedNodes();
        if (selected && selected.length) {
            return selected[0].data;
        }
        return undefined;
    };
    Site.prototype.getCatFromModal = function () {
        return new client_1.Cat({
            id: this.getInputString(this.$catId),
            name: this.getInputString(this.$catName),
            birth: this.getInputDate(this.$catBirth),
            hungry: this.getInputBoolean(this.$catHungry),
            mood: this.getInputMood(this.$catMood)
        });
    };
    Site.prototype.setModalFromCat = function (cat) {
        this.$catId.val(cat.id || "");
        this.$catName.val(cat.name || "");
        this.$catBirth.val(moment(cat.birth).format());
        this.$catHungry.prop('checked', cat.hungry);
        this.$catModal.val(cat.mood);
    };
    Site.prototype.getInputString = function ($input) {
        var val = $input.val();
        if (val !== 0 && !val) {
            return undefined;
        }
        return String(val);
    };
    Site.prototype.getInputDate = function ($input) {
        var m = moment($input.val());
        if (!m.isValid()) {
            return moment().toDate();
        }
        else {
            return m.toDate();
        }
    };
    Site.prototype.getInputBoolean = function ($input) {
        return $input.is(':checked') || false;
    };
    Site.prototype.getInputMood = function ($input) {
        var val = $input.val();
        if (val == client_1.Mood.Amber) {
            return client_1.Mood.Amber;
        }
        else if (val == client_1.Mood.Green) {
            return client_1.Mood.Green;
        }
        else if (val == client_1.Mood.Red) {
            return client_1.Mood.Red;
        }
        else {
            return client_1.Mood.None;
        }
    };
    return Site;
}());
new Site();
//# sourceMappingURL=data:application/json;base64,