"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("bootstrap");
require("../scss/_bootstrap-custom.scss");
var ag_grid_community_1 = require("ag-grid-community");
require("ag-grid-community/dist/styles/ag-grid.css");
require("ag-grid-community/dist/styles/ag-theme-balham.css");
var signalR = require("@aspnet/signalr");
var client_1 = require("./nswag/client");
var moment = require("moment");
var Site = /** @class */ (function () {
    function Site() {
        var _this = this;
        this.siteRoot = window.__site_root;
        this.gridOptions = {};
        this.$catModal = $('#cat-modal');
        this.$catTitle = $('#cat-modal-title');
        this.$confirmSave = $('#confirm-save');
        this.$deleteModal = $('#delete-modal');
        this.$deleteCatName = $('#delete-modal-cat-name');
        this.$confirmDelete = $('#confirm-delete');
        this.$catId = $('#cat-id');
        this.$catName = $('#cat-name');
        this.$catBirth = $('#cat-birth');
        this.$catMood = $('#cat-mood');
        this.$catHungry = $('#cat-hungry');
        if (this.siteRoot.length > 1 && this.siteRoot.lastIndexOf("/") === this.siteRoot.length - 1) {
            this.siteRoot = this.siteRoot.substring(0, this.siteRoot.length - 1);
        }
        this.hubConnection = new signalR.HubConnectionBuilder()
            .withUrl(this.siteRoot + "/hub")
            .build();
        this.catsClient = new client_1.CatsClient(this.siteRoot);
        this.gridOptions.columnDefs = this.getColumns();
        this.gridOptions.getRowNodeId = function (cat) { return cat.id || ""; };
        this.gridOptions.rowSelection = 'single';
        this.gridOptions.defaultColDef = {
            sortable: true,
            resizable: true
        };
        this.gridOptions.enableCellChangeFlash = true;
        this.gridOptions.rowData = [];
        this.gridOptions.onSelectionChanged = function (event) { return _this.gridSelectionChanged(event); };
        var eGridDiv = document.querySelector('#cat-grid');
        new ag_grid_community_1.Grid(eGridDiv, this.gridOptions);
        this.catsClient.get(function (cats) { return _this.loadCats(cats); });
        $('.modal-action').click(function (e) {
            var $target = $(e.target);
            if ($target.data('action') && $target.data('target')) {
                $($target.data('target')).data('action', $target.data('action'));
            }
        });
        this.$catModal.on('show.bs.modal', function () { return _this.catModalShown(); });
        this.$deleteModal.on('show.bs.modal', function () { return _this.deleteModalShown(); });
        this.catFlatpicker = window.flatpickr(document.querySelector('#cat-birth'), {
            enableTime: true
        });
        this.$confirmSave.click(function () { return _this.saveCat(); });
        this.$confirmDelete.click(function () { return _this.deleteCat(); });
        this.hubConnection.start().catch(function (err) { return console.log(err); });
        this.hubConnection.on("updateCat", function (c) { return _this.updateCat(c); });
        this.hubConnection.on("deleteCat", function (c) { return _this.removeCat(c); });
    }
    Site.prototype.updateCat = function (c) {
        if (!c || !c.id) {
            return;
        }
        if (this.gridOptions.api.getRowNode(c.id)) {
            this.gridOptions.api.updateRowData({ update: [c] });
        }
        else {
            this.gridOptions.api.updateRowData({ add: [c] });
        }
    };
    Site.prototype.removeCat = function (c) {
        if (!c || !c.id) {
            return;
        }
        this.gridOptions.api.updateRowData({ remove: [c] });
    };
    Site.prototype.saveCat = function () {
        var _this = this;
        var cat = this.getCatFromModal();
        this.catsClient.insertUpdate(cat, function (c) {
            if (c) {
                _this.hubConnection.invoke("catUpdated", c);
                _this.$catModal.modal('hide');
            }
        });
    };
    Site.prototype.deleteCat = function () {
        var _this = this;
        var cat = this.getSelectedCat();
        if (cat) {
            this.catsClient.delete(cat, function (c) {
                if (c) {
                    _this.hubConnection.invoke("catDeleted", c);
                    _this.$deleteModal.modal('hide');
                }
            });
        }
    };
    Site.prototype.gridSelectionChanged = function (event) {
        var selected = this.getSelectedCat();
        if (selected) {
            $('.selection-required').prop('disabled', false);
        }
        else {
            $('.selection-required').prop('disabled', true);
        }
    };
    Site.prototype.catModalShown = function () {
        if (this.$catModal.data('action') == 'add') {
            this.setModalFromCat();
            this.$catTitle.text("Add A Cat");
        }
        else {
            var selected = this.getSelectedCat() || new client_1.Cat();
            this.setModalFromCat(selected);
            this.$catTitle.text("Edit A Cat");
        }
    };
    Site.prototype.deleteModalShown = function () {
        var selected = this.getSelectedCat();
        if (selected && selected.name) {
            this.$deleteCatName.text(selected.name);
        }
        else if (selected) {
            this.$deleteCatName.text(selected.id || "Undefined");
        }
    };
    Site.prototype.loadCats = function (cats) {
        this.gridOptions.api.setRowData(cats || []);
    };
    Site.prototype.getColumns = function () {
        var _this = this;
        return [
            { headerName: "Id", field: "id", hide: true },
            { headerName: "Name", field: "name" },
            { headerName: "Birth", field: "birth", valueFormatter: function (params) { return _this.formatBirth(params); } },
            { headerName: "Hungry", field: "hungry", cellRenderer: function (p) { return _this.renderHungry(p); } },
            { headerName: "Mood", field: "mood", cellRenderer: function (p) { return _this.renderMood(p); } }
        ];
    };
    Site.prototype.formatBirth = function (p) {
        if (!p.value) {
            return "";
        }
        return moment(p.value).format("YYYY-MM-DD hh:mm");
    };
    Site.prototype.renderHungry = function (p) {
        if (p.data && p.data.hungry) {
            return '<i class="far fa-check-square"></i>';
        }
        else {
            return '<i class="far fa-square"></i>';
        }
    };
    Site.prototype.renderMood = function (p) {
        if (!p.data || !p.data.mood) {
            return '<i class="far"></i>';
        }
        else {
            switch (p.data.mood) {
                case 1:
                    return '<i class="fas fa-square" style="color: red"></i> Red';
                case 2:
                    return '<i class="fas fa-square" style="color: #FFBF00"></i> Amber';
                case 3:
                    return '<i class="fas fa-square" style="color: green"></i> Green';
                default:
                    return '<i class="far"></i>';
            }
        }
    };
    Site.prototype.getSelectedCat = function () {
        var selected = this.gridOptions.api.getSelectedNodes();
        if (selected && selected.length) {
            return selected[0].data;
        }
        return undefined;
    };
    Site.prototype.getCatFromModal = function () {
        return new client_1.Cat({
            id: this.getInputString(this.$catId),
            name: this.getInputString(this.$catName),
            birth: this.getInputDate(this.$catBirth),
            hungry: this.getInputBoolean(this.$catHungry),
            mood: this.getInputMood(this.$catMood)
        });
    };
    Site.prototype.setModalFromCat = function (cat) {
        cat = cat || new client_1.Cat();
        this.$catId.val(cat.id || "");
        this.$catName.val(cat.name || "");
        this.catFlatpicker.setDate(cat.birth);
        this.$catHungry.prop('checked', cat.hungry);
        this.$catMood.val(cat.mood);
    };
    Site.prototype.getInputString = function ($input) {
        var val = $input.val();
        if (val !== 0 && !val) {
            return undefined;
        }
        return String(val);
    };
    Site.prototype.getInputDate = function ($input) {
        var m = moment($input.val());
        if (!m.isValid()) {
            return moment().toDate();
        }
        else {
            return m.toDate();
        }
    };
    Site.prototype.getInputBoolean = function ($input) {
        return $input.is(':checked') || false;
    };
    Site.prototype.getInputMood = function ($input) {
        var val = $input.val();
        if (val == client_1.Mood.Amber) {
            return client_1.Mood.Amber;
        }
        else if (val == client_1.Mood.Green) {
            return client_1.Mood.Green;
        }
        else if (val == client_1.Mood.Red) {
            return client_1.Mood.Red;
        }
        else {
            return client_1.Mood.None;
        }
    };
    return Site;
}());
new Site();
//# sourceMappingURL=data:application/json;base64,