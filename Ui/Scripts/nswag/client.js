"use strict";
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var jQuery = __importStar(require("jquery"));
var CatsClient = /** @class */ (function () {
    function CatsClient(baseUrl) {
        this.beforeSend = undefined;
        this.jsonParseReviver = undefined;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost/Cats";
    }
    CatsClient.prototype.get = function (onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processGetWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processGet = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                    var item = resultData200_1[_i];
                    result200.push(Cat.fromJS(item));
                }
            }
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    CatsClient.prototype.insertUpdate = function (c, onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(c);
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processInsertUpdateWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processInsertUpdateWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processInsertUpdateWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processInsertUpdate(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processInsertUpdate = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cat.fromJS(resultData200) : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    CatsClient.prototype.delete = function (c, onSuccess, onFail) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cats";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(c);
        var jqXhr = jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        jqXhr.done(function (_data, _textStatus, xhr) {
            _this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail(function (xhr) {
            _this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
        return jqXhr;
    };
    CatsClient.prototype.processDeleteWithCallbacks = function (_url, xhr, onSuccess, onFail) {
        try {
            var result = this.processDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        }
        catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    };
    CatsClient.prototype.processDelete = function (xhr) {
        var status = xhr.status;
        var _headers = {};
        if (status === 200) {
            var _responseText = xhr.responseText;
            var result200 = null;
            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cat.fromJS(resultData200) : null;
            return result200;
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    };
    return CatsClient;
}());
exports.CatsClient = CatsClient;
var Cat = /** @class */ (function () {
    function Cat(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Cat.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.birth = data["birth"] ? new Date(data["birth"].toString()) : undefined;
            this.mood = data["mood"];
            this.hungry = data["hungry"];
        }
    };
    Cat.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Cat();
        result.init(data);
        return result;
    };
    Cat.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["birth"] = this.birth ? this.birth.toISOString() : undefined;
        data["mood"] = this.mood;
        data["hungry"] = this.hungry;
        return data;
    };
    return Cat;
}());
exports.Cat = Cat;
var Mood;
(function (Mood) {
    Mood[Mood["None"] = 0] = "None";
    Mood[Mood["Red"] = 1] = "Red";
    Mood[Mood["Amber"] = 2] = "Amber";
    Mood[Mood["Green"] = 3] = "Green";
})(Mood = exports.Mood || (exports.Mood = {}));
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
exports.SwaggerException = SwaggerException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}
//# sourceMappingURL=data:application/json;base64,